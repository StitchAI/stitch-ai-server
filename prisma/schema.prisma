generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  walletAddress String @id

  apiKey String @unique

  memorySpaces MemorySpace[]

  memories         Memory[]
  externalMemories ExternalMemory[]

  marketListings MarketListing[]
  purchases      Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([walletAddress, apiKey])
}

model MemorySpace {
  id String @id @default(uuid())

  name     String
  memories Memory[]

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [walletAddress])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([ownerId, name])
}

model Memory {
  id String @id @default(uuid())

  message String
  data    Json // { character: string, episodic: string }

  spaceId String
  space   MemorySpace @relation(fields: [spaceId], references: [id])

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [walletAddress])

  marketListings MarketListing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExternalMemory {
  id String @id @default(uuid())

  operator     String
  operatorLogo String

  name    String
  message String?

  data String

  ownerId String?
  owner   User?   @relation(fields: [ownerId], references: [walletAddress])

  marketListings MarketListing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MarketListing {
  id String @id @default(uuid())

  price    Float
  priceWei String

  active Boolean @default(true)

  internalId String // id for the listing in the contract
  txHash     String
  memoryType String // 0: agent memory, 1: external memory

  memoryId String?
  memory   Memory? @relation(fields: [memoryId], references: [id])

  externalMemoryId String?
  externalMemory   ExternalMemory? @relation(fields: [externalMemoryId], references: [id])

  sellerId String
  seller   User   @relation(fields: [sellerId], references: [walletAddress])

  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id String @id @default(uuid())

  listingId String
  listing   MarketListing @relation(fields: [listingId], references: [id])

  internalListingId String // id for the listing in the contract

  buyerId String
  buyer   User   @relation(fields: [buyerId], references: [walletAddress])

  txHash String

  price Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
